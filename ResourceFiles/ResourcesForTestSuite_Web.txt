=====================================================================================
#    Filename   :  ResourcesForTestSuite_Web.txt
#
#    Description:  This file contains all the Keywords to be used in main TestSuite for Web
#
#    Version    :  1.0
#    Created    :  25/01/2022
#    Compiler   :  python
#    Author     :  Arun John
#    Company    :
#
#    Revision History:
#
# =====================================================================================



*** Settings ***

Library  SeleniumLibrary    timeout=00:00:01    implicit_wait=2 seconds    run_on_failure=Capture Page Screenshot    screenshot_root_directory=None    plugins=None    event_firing_webdriver=None
Library     Collections
Library    DateTime
Library    BuiltIn
Library    FakerLibrary
Library    String
Library    RequestsLibrary
Library    String

Variables    ${EXECDIR}/TestData/TestData_Web.py
Variables    ${EXECDIR}/ObjectRepository/Element_Locators_Web.py

***Variables***
${BASE_URL}    https://www.flaconi.de/


***Keywords***

#################################################################################
# KeyWord Name : Open URL & Validate API response for sub menu
# Document     : Keyword to open a browser and verify api response of submenu
#################################################################################
Open URL & Validate API response for sub menu
    Open Browser    ${url}       ${browser}
    Maximize Browser Window
    Sleep    5s
    Repeat Keyword    6 times    Press Keys    None    TAB
    Press Keys    None    RETURN
    Wait Until Page Contains Element    ${makeup_menu_xpath}
    Mouse Over    ${makeup_menu_xpath}
    Sleep    2s

    #Get a list of all the links that has base_url+/make-up/ in the below code

    ${element_list}=     Get Webelements     xpath=//a[@href="/make-up/"]
    ${href_list}=  Evaluate  [item.get_attribute('href') for item in $element_list]
    Log to console    ${href_list}

    #iterate through the list of all links, create a http request and verify the response code is 200
    Create Session    testing    ${BASE_URL}
    FOR    ${element_href}    IN    @{href_list}
        ${uri}=    Remove String    ${element_href}    ${BASE_URL}
        ${contains_base_url}=    Evaluate     "${BASE_URL}" in "${element_href}"
        ${response}=    Run Keyword If    ${contains_base_url}    GET On Session    testing    ${uri}
        Run Keyword If    ${contains_base_url}    Should Be Equal As Strings     ${response.status_code}    200
    END
    #this testcase fails if any of the response returns any code other than 200

######################################################################################################
# KeyWord Name : Add a Product to Cart & Validate Invalid Coupon Code Message
# Document     : Keyword to add a random product to cart and validate invalid coupon code message
######################################################################################################
Add a Product to Cart & Validate Invalid Coupon Code Message
    Click Element    ${perfume_menu_xpath}
    Sleep    3s
    Scroll Element into View    ${random_product_plp_xpath}
    Click Element    ${random_product_plp_xpath}
    Sleep    3s
    Scroll Element into View    ${random_product_pdp_add_to_cart_button_xpath}
    Click Element    ${random_product_pdp_add_to_cart_button_xpath}
    Sleep    3s
    Wait Until Page Contains    ${proceed_to_cart_text}    5s
    Click Element       //*[contains(text(),'${proceed_to_cart_text}')]
    Wait Until Page Contains Element    ${coupon_code_field_id}
    Input Text    ${coupon_code_field_id}    ${random_coupon_code}
    Sleep    2s
    Click Button    ${redeem_coupon_button_xpath}
    Wait Until Page Contains    ${invalid_coupon_code_error_message}
    Capture Page Screenshot
    Close Browser







